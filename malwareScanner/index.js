// Simple Express server for malware scanning
const express = require("express")
const NodeClam = require("clamscan")
const multer = require("multer")

const app = express()
const upload = multer({ storage: multer.memoryStorage() })

let clamav = null

// Initialize ClamAV
async function initClamAV() {
  if (clamav) return clamav

  try {
    clamav = await new NodeClam().init({
      clamdscan: {
        host: "localhost",
        port: 3310,
        timeout: 60000,
      },
      preference: "clamdscan",
    })

    console.log("✅ ClamAV initialized")
    return clamav
  } catch (error) {
    console.error("❌ ClamAV init failed:", error)
    throw error
  }
}

// Middleware to check API key
function checkApiKey(req, res, next) {
  const apiKey = process.env.API_KEY

  // If API_KEY is set, validate it
  if (apiKey) {
    const providedKey = req.headers["x-api-key"]

    if (!providedKey || providedKey !== apiKey) {
      return res.status(401).json({ error: "Unauthorized" })
    }
  }

  next()
}

// Health check (no auth required)
app.get("/health", (req, res) => {
  res.json({ status: "ok", service: "malware-scanner" })
})

// Scan file endpoint (with API key check)
app.post("/scan", checkApiKey, upload.single("file"), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "No file provided" })
    }

    const clam = await initClamAV()
    
    // Use scanStream with a readable stream from buffer
    const { Readable } = require("stream")
    const stream = Readable.from(req.file.buffer)
    
    const { isInfected, viruses } = await clam.scanStream(stream)

    if (isInfected) {
      console.warn("🚨 Malware detected:", viruses)
      return res.json({
        safe: false,
        threat: viruses?.[0] || "Unknown threat",
      })
    }

    console.log("✅ File passed scan")
    res.json({ safe: true })
  } catch (error) {
    console.error("❌ Scan error:", error)
    res.status(500).json({ error: "Scan failed" })
  }
})

const PORT = process.env.PORT || 3006

app.listen(PORT, () => {
  console.log(`🔍 Malware scanner running on port ${PORT}`)
  initClamAV().catch(console.error)
})
