name: Publish Browser Extensions

on:
  push:
    tags:
      - "extension-v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Extension version to publish"
        required: true
        default: "1.1.15"

permissions:
  contents: write # Required for creating releases

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build extensions
        run: |
          cd apps/extension
          npm run build:all

      - name: Create source code archive for Firefox
        run: |
          # Create vex.zip with only extension source code (not entire monorepo)
          cd apps/extension
          zip -r vex.zip . ../../../packages/ui \
            -x '*/node_modules/**' \
            -x '*/dist/**' \
            -x '*/.next/**' \
            -x '*/.turbo/**' \
            -x '*.zip' \
            -x '*.env' \
            -x '*.gitignore' \
            -x '*.tsconfig.json'
          mv vex.zip ../../

      - name: Verify build artifacts exist
        run: |
          set -e
          echo "::group::List artifacts"
          ls -lah apps/extension | sed 's/^/apps\/extension: /'
          ls -lah | sed 's/^/repo-root: /'
          echo "::endgroup::"
          test -f apps/extension/dist-chrome.zip || (echo "Missing apps/extension/dist-chrome.zip" && exit 1)
          test -f apps/extension/dist-firefox.zip || (echo "Missing apps/extension/dist-firefox.zip" && exit 1)
          test -f vex.zip || (echo "Missing root vex.zip (source)" && exit 1)

      - name: Check Chrome Web Store secrets
        id: check-chrome-secrets
        run: |
          if [[ -z "${{ secrets.CHROME_CLIENT_ID }}" || -z "${{ secrets.CHROME_CLIENT_SECRET }}" || -z "${{ secrets.CHROME_REFRESH_TOKEN }}" || -z "${{ secrets.CHROME_EXTENSION_ID }}" ]]; then
            echo "chrome_secrets_available=false" >> $GITHUB_OUTPUT
            echo "‚ùå Chrome Web Store secrets not configured. Skipping Chrome upload."
            echo "Required secrets: CHROME_CLIENT_ID, CHROME_CLIENT_SECRET, CHROME_REFRESH_TOKEN, CHROME_EXTENSION_ID"
          else
            echo "chrome_secrets_available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Chrome Web Store secrets found"
          fi

      - name: Debug Chrome Extension Files
        if: steps.check-chrome-secrets.outputs.chrome_secrets_available == 'true'
        run: |
          echo "::group::Chrome Extension Debug Info"
          echo "Inspecting contents of dist-chrome.zip..."
          ls -la apps/extension/dist-chrome.zip
          mkdir -p temp_unzip
          unzip -o apps/extension/dist-chrome.zip -d temp_unzip
          echo "--- Contents of manifest.json ---"
          cat temp_unzip/manifest.json
          echo "---------------------------------"
          echo "::endgroup::"

      - name: Create Chrome Extension Keys JSON
        id: create-chrome-json
        if: steps.check-chrome-secrets.outputs.chrome_secrets_available == 'true'
        run: |
          JSON_CONTENT=$(jq -n \
            --arg clientId "${{ secrets.CHROME_CLIENT_ID }}" \
            --arg clientSecret "${{ secrets.CHROME_CLIENT_SECRET }}" \
            --arg refreshToken "${{ secrets.CHROME_REFRESH_TOKEN }}" \
            --arg extId "${{ secrets.CHROME_EXTENSION_ID }}" \
            '{
              "$schema": "https://github.com/PlasmoHQ/bpp/raw/main/keys.schema.json",
              "chrome": {
                "zip": "dist-chrome.zip",
                "clientId": $clientId,
                "clientSecret": $clientSecret,
                "refreshToken": $refreshToken,
                "extId": $extId
              }
            }')
          echo "CHROME_KEYS_JSON<<EOF" >> $GITHUB_ENV
          echo "$JSON_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "::group::Debug Chrome Keys JSON"
          echo "Generated chrome-keys.json content:"
          echo "$JSON_CONTENT"
          echo "::endgroup::"

      - name: Upload Chrome Extension to Web Store (PlasmoHQ/bpp)
        if: steps.check-chrome-secrets.outputs.chrome_secrets_available == 'true'
        uses: PlasmoHQ/bpp@v3
        with:
          keys: ${{ env.CHROME_KEYS_JSON }}
          chrome-file: apps/extension/dist-chrome.zip
          verbose: true

      - name: Check Firefox AMO secrets
        id: check-firefox-secrets
        run: |
          if [[ -z "${{ secrets.FIREFOX_API_KEY }}" || -z "${{ secrets.FIREFOX_API_SECRET }}" ]]; then
            echo "firefox_secrets_available=false" >> $GITHUB_OUTPUT
            echo "‚ùå Firefox AMO secrets not configured. Skipping Firefox upload."
            echo "Required secrets: FIREFOX_API_KEY, FIREFOX_API_SECRET"
          else
            echo "firefox_secrets_available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Firefox AMO secrets found"
          fi

      - name: Create Firefox Extension Keys JSON
        if: steps.check-firefox-secrets.outputs.firefox_secrets_available == 'true'
        run: |
          JSON_CONTENT=$(jq -n \
            --arg apiKey "${{ secrets.FIREFOX_API_KEY }}" \
            --arg apiSecret "${{ secrets.FIREFOX_API_SECRET }}" \
            '{
              "$schema": "https://github.com/PlasmoHQ/bpp/raw/main/keys.schema.json",
              "firefox": {
                "file": "dist-firefox.zip",
                "sourceFile": "vex.zip",
                "apiKey": $apiKey,
                "apiSecret": $apiSecret
              }
            }')
          echo "FIREFOX_KEYS_JSON<<EOF" >> $GITHUB_ENV
          echo "$JSON_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "::group::Debug Firefox Keys JSON"
          echo "Generated firefox-keys.json content:"
          echo "$JSON_CONTENT"
          echo "::endgroup::"

      - name: Upload Firefox Extension to AMO
        if: steps.check-firefox-secrets.outputs.firefox_secrets_available == 'true'
        uses: PlasmoHQ/bpp@v3
        with:
          keys: ${{ env.FIREFOX_KEYS_JSON }}
          firefox-file: apps/extension/dist-firefox.zip
          source: vex.zip
          verbose: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            apps/extension/dist-chrome.zip
            apps/extension/dist-firefox.zip
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: false

      - name: Publishing Summary
        if: always()
        run: |
          echo "## üì¶ Extension Publishing Summary"
          echo ""
          if [[ "${{ steps.check-chrome-secrets.outputs.chrome_secrets_available }}" == "true" ]]; then
            echo "‚úÖ Chrome Web Store: Published"
            echo "   üîó https://chrome.google.com/webstore/detail/vex/odgdgbbddopmblglebfngmaebmnhegfc"
          else
            echo "‚è≠Ô∏è  Chrome Web Store: Skipped (missing secrets)"
            echo "   ‚ÑπÔ∏è  Configure these secrets to enable Chrome publishing:"
            echo "      - CHROME_EXTENSION_ID"
            echo "      - CHROME_CLIENT_ID" 
            echo "      - CHROME_CLIENT_SECRET"
            echo "      - CHROME_REFRESH_TOKEN"
          fi
          echo ""
          if [[ "${{ steps.check-firefox-secrets.outputs.firefox_secrets_available }}" == "true" ]]; then
            echo "‚úÖ Firefox AMO: Published"
            echo "   üîó https://addons.mozilla.org/en-US/firefox/addon/vex"
          else
            echo "‚è≠Ô∏è  Firefox AMO: Skipped (missing secrets)"
            echo "   ‚ÑπÔ∏è  Configure these secrets to enable Firefox publishing:"
            echo "      - FIREFOX_API_KEY"
            echo "      - FIREFOX_API_SECRET"
          fi
          echo ""
          echo "‚úÖ GitHub Release: Created with extension files"
